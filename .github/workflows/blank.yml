name: Desplegar Frontend a Docker Hub y Servidor

on:
  push:
    branches:
      - master  # Ejecuta el workflow cuando hay un push a la rama "master"
      - dev     # Ejecuta el workflow cuando hay un push a la rama "dev"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Iniciar sesi√≥n en Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Obtener nombre de la rama
        id: branch_name
        run: |
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "üîñ Rama detectada: ${GITHUB_REF#refs/heads/}"

      - name: Definir etiqueta de imagen y directorio
        run: |
          echo "üî¢ Configurando versi√≥n de la imagen..."
          if [ "${{ env.BRANCH_NAME }}" = "master" ]; then
            IMAGE_NAME="baumanpeter/humberto:humbertofrontend"
            COMPOSE_DIR="/root/Proyecto_H/DockerComposeHumberto"
            ENV_TYPE="PRODUCCI√ìN"
          else
            IMAGE_NAME="baumanpeter/humberto:humbertofrontend-dev"
            COMPOSE_DIR="/root/Proyecto_H/DockerComposeHumberto-dev"
            ENV_TYPE="DESARROLLO"
          fi
          IMAGE_VERSION="$IMAGE_NAME-v${{ github.run_number }}"
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
          echo "COMPOSE_DIR=$COMPOSE_DIR" >> $GITHUB_ENV
          echo "ENV_TYPE=$ENV_TYPE" >> $GITHUB_ENV
          echo "‚úÖ Imagen: $IMAGE_VERSION"
          echo "‚úÖ Directorio: $COMPOSE_DIR"
          echo "‚úÖ Ambiente: $ENV_TYPE"

      - name: Verificar contenido del directorio
        run: ls -l .

      - name: Construir imagen Docker y cargarla localmente
        run: |
          echo "üöÄ Construyendo la imagen Docker para ${{ env.ENV_TYPE }} (${{ env.BRANCH_NAME }})..."
          docker buildx build --platform linux/amd64 --load -t $IMAGE_VERSION .
          echo "‚úÖ Imagen construida y cargada en Docker local."

      - name: Listar im√°genes Docker (depuraci√≥n)
        run: docker images

      - name: Subir imagen Docker a Docker Hub
        run: |
          echo "üì§ Subiendo la imagen a Docker Hub..."
          docker push $IMAGE_VERSION
          echo "‚úÖ Imagen subida exitosamente a Docker Hub para ${{ env.ENV_TYPE }}."

      - name: Desplegar al servidor remoto y actualizar servicios
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: IMAGE_VERSION,BRANCH_NAME,COMPOSE_DIR,ENV_TYPE
          script: |
            echo "üì• Iniciando despliegue remoto para $ENV_TYPE (rama: $BRANCH_NAME)..."
            
            # Hacer pull de la nueva imagen
            echo "üì¶ Descargando nueva imagen Docker..."
            docker pull $IMAGE_VERSION
            
            # Navegar al directorio correcto seg√∫n el ambiente
            echo "üìÇ Navegando a directorio: $COMPOSE_DIR"
            cd $COMPOSE_DIR
            
            # Actualizar la imagen en docker-compose.yml seg√∫n el ambiente
            echo "üîÑ Actualizando imagen en docker-compose.yml para $ENV_TYPE..."
            if [ "$BRANCH_NAME" = "master" ]; then
              # Ambiente de producci√≥n
              sed -i "s|baumanpeter/humberto:humbertofrontend-v[0-9]*|$IMAGE_VERSION|g" docker-compose.yml
              echo "‚úÖ Actualizada imagen de producci√≥n en DockerComposeHumberto"
            else
              # Ambiente de desarrollo
              sed -i "s|baumanpeter/humberto:humbertofrontend-dev-v[0-9]*|$IMAGE_VERSION|g" docker-compose.yml
              echo "‚úÖ Actualizada imagen de desarrollo en DockerComposeHumberto-dev"
            fi
            
            # Mostrar cambios realizados
            echo "üîç Verificando cambios en docker-compose.yml:"
            grep "baumanpeter/humberto" docker-compose.yml || echo "No se encontr√≥ la imagen en el archivo"
            
            # Ejecutar el script de actualizaci√≥n
            echo "üõ† Ejecutando script de actualizaci√≥n de servicios..."
            cd /root/Proyecto_H
            chmod +x update_all_services.sh
            ./update_all_services.sh
            
            echo "üöÄ Despliegue completado exitosamente para $ENV_TYPE"
            echo "‚úÖ Todos los servicios han sido actualizados y reiniciados"
            echo "üìç Directorio utilizado: $COMPOSE_DIR"